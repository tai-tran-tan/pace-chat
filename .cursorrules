# Cursor Rules for Pace Chat Project

## 🎯 Project Context
This is a mobile chat application with React Native frontend and Kotlin backend. The project includes mobile app and backend API with real-time WebSocket communication.

## 📁 Project Structure
- `mobile-app/` - React Native application with Expo
- `backend/` - Kotlin + Vert.x backend API
- `web-app/` - Next.js web application
- `docs/` - Project documentation and API specs

## 🌐 Language Rules
- **ALL CODE**: Always use English for code, comments, variable names, and technical terms
- **UI Text**: Use English for all text displayed to users (labels, messages, etc.)
- **Documentation**: English for all technical documentation
- **Validation Messages**: English for all form validation messages
- **Error Messages**: English for all error messages and notifications
- **Comments**: English for all code comments and documentation

## 🎨 UI/UX Rules
- Material Design principles
- Responsive design for mobile
- Dark/Light theme support
- Consistent color scheme
- Accessibility considerations
- Loading states and error handling

## 📝 Code Style Rules
- Use camelCase for variables and functions
- PascalCase for components and classes
- Kebab-case for file names
- 2 spaces indentation
- Semicolons required
- Single quotes for strings
- Trailing commas in objects and arrays

## 🔒 Security Rules
- Never commit API keys or secrets
- Use environment variables
- Validate all user inputs
- Sanitize data before saving to database
- Implement proper authentication

## 🧪 Testing Rules
- Write unit tests for business logic
- Integration tests for API endpoints
- E2E tests for critical user flows
- Minimum 80% code coverage

## 📚 Documentation Rules
- JSDoc comments for functions
- README files for each major component
- API documentation with examples
- Setup instructions for development

## 🚀 Performance Rules
- Lazy loading for images
- Memoization for expensive calculations
- Debounce for search inputs
- Pagination for large lists
- Optimize bundle size

## 🔄 Git Rules
- Conventional commits format
- Feature branches from main
- Pull request reviews required
- No direct commits to main branch
- Meaningful commit messages

## 📦 Dependencies Rules
- Pin exact versions in package.json/build.gradle.kts
- Regular security updates
- Audit dependencies monthly
- Minimal dependencies approach
- Document why each dependency is needed

## 🎯 Development Workflow
- Use specific .cursorrules in each subdirectory
- Follow technology-specific patterns
- Maintain consistent project structure
- Regular code reviews and testing 